---
title: One Way Anova with a random effect using Cmdstan
author: "[Julian Faraway](https://julianfaraway.github.io/)"
date: "`r format(Sys.time(), '%d %B %Y')`"
format: 
  gfm:
    toc: true
---

```{r global_options, include=FALSE}
knitr::opts_chunk$set(comment=NA, 
                      echo = TRUE,
                      fig.path="figs/",
                      dev = 'svglite',  
                      fig.ext = ".svg",
                      warning=FALSE, 
                      message=FALSE)
knitr::opts_knit$set(global.par = TRUE)
```

```{r graphopts, include=FALSE}
par(mgp=c(1.5,0.5,0), mar=c(3.1,3.1,0.1,0), pch=20)
ggplot2::theme_set(ggplot2::theme_bw())
```

```{r}
library(faraway)
library(cmdstanr)
library(ggplot2)
library(bayesplot)
```

# Data

Load up and look at the data, which concerns the brightness of paper
which may vary between operators of the production machinery.

```{r pulpdat}
data(pulp, package="faraway")
summary(pulp)
ggplot(pulp, aes(x=operator, y=bright))+geom_point(position = position_jitter(width=0.1, height=0.0))
```

# CMDSTAN

- Load in the STAN file without compiling
- Look at it
- Update a deprecated expression (fixing this in the source would break rstan version)
- Now compile it

```{r}
mod <- cmdstan_model("../stancode/pulp.stan", compile = FALSE)
mod$print()
mod$format(canonicalize = TRUE)
mod$compile()
```

Put the data into a format it can be used:

```{r}
pulpdat <- list(N=nrow(pulp),
                J=length(unique(pulp$operator)),
                response=pulp$bright,
                predictor=as.numeric(pulp$operator))
```

Do the MCMC sampling:

```{r}
fit <- mod$sample(
  data = pulpdat, 
  seed = 123, 
  chains = 4, 
  parallel_chains = 4,
  refresh = 500 # print update every 500 iters
)
```

Get summary on the parameters of interest.

```{r}
fit$summary(c("mu","sigmaalpha","sigmaepsilon","a"))
```

Show posterior densities on the two variance terms:

```{r cspulpvars}
mcmc_dens(fit$draws(c("sigmaalpha","sigmaepsilon")),facet_args=list(scales="fixed"))
```

Show posteriors on the random effect terms:

```{r cspulpre}
mcmc_dens(fit$draws(c("a")),facet_args=list(scales="fixed"))
```

Compute the lower tail probability.

```{r}
fit$summary("sigmaalpha", tailprob = ~ mean(. <= 0.1))
```

Results not noticeably different from the rstan version. Runs faster and worked with the most recent version of Stan.








